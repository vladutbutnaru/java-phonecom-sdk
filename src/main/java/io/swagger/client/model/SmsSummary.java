/*
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Recipient;
import java.util.ArrayList;
import java.util.List;

/**
 * The SMS Summary Object is used to briefly represent a sms. It can be seen in several places throughout this API. Here are the properties:
 */
@ApiModel(description = "The SMS Summary Object is used to briefly represent a sms. It can be seen in several places throughout this API. Here are the properties:")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-02-09T09:08:03.715Z")
public class SmsSummary {
  @SerializedName("id")
  private String id = null;

  @SerializedName("from")
  private String from = null;

  @SerializedName("to")
  private List<Recipient> to = new ArrayList<Recipient>();

  @SerializedName("direction")
  private String direction = null;

  public SmsSummary id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unique SMS ID. Read-only.
   * @return id
  **/
  @ApiModelProperty(example = "null", required = true, value = "Unique SMS ID. Read-only.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public SmsSummary from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Caller ID number to display on the incoming/outgoing SMS message. For an outgoing message, it must be a phone number associated with your Phone.com account.
   * @return from
  **/
  @ApiModelProperty(example = "null", required = true, value = "Caller ID number to display on the incoming/outgoing SMS message. For an outgoing message, it must be a phone number associated with your Phone.com account.")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public SmsSummary to(List<Recipient> to) {
    this.to = to;
    return this;
  }

  public SmsSummary addToItem(Recipient toItem) {
    this.to.add(toItem);
    return this;
  }

   /**
   * An array of SMS recipients.
   * @return to
  **/
  @ApiModelProperty(example = "null", required = true, value = "An array of SMS recipients.")
  public List<Recipient> getTo() {
    return to;
  }

  public void setTo(List<Recipient> to) {
    this.to = to;
  }

  public SmsSummary direction(String direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Direction of SMS. 'in' for Incoming messages, 'out' for Outgoing messages.
   * @return direction
  **/
  @ApiModelProperty(example = "null", required = true, value = "Direction of SMS. 'in' for Incoming messages, 'out' for Outgoing messages.")
  public String getDirection() {
    return direction;
  }

  public void setDirection(String direction) {
    this.direction = direction;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmsSummary smsSummary = (SmsSummary) o;
    return Objects.equals(this.id, smsSummary.id) &&
        Objects.equals(this.from, smsSummary.from) &&
        Objects.equals(this.to, smsSummary.to) &&
        Objects.equals(this.direction, smsSummary.direction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, from, to, direction);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmsSummary {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

