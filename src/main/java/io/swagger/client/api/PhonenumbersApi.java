/**
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.PhoneNumberFull;
import io.swagger.client.model.CreatePhoneNumberParams;
import io.swagger.client.model.ListPhoneNumbersFull;
import io.swagger.client.model.ReplacePhoneNumberParams;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PhonenumbersApi {
    private ApiClient apiClient;

    public PhonenumbersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PhonenumbersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createAccountPhoneNumber */
    private com.squareup.okhttp.Call createAccountPhoneNumberCall(Integer accountId, CreatePhoneNumberParams data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createAccountPhoneNumber(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/phone-numbers".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Add a phone number to an account
     * See Intro to Account Phone Numbers for more info on the properties to use.
     * @param accountId Account ID (required)
     * @param data Phone Number data (optional)
     * @return PhoneNumberFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PhoneNumberFull createAccountPhoneNumber(Integer accountId, CreatePhoneNumberParams data) throws ApiException {
        ApiResponse<PhoneNumberFull> resp = createAccountPhoneNumberWithHttpInfo(accountId, data);
        return resp.getData();
    }

    /**
     * Add a phone number to an account
     * See Intro to Account Phone Numbers for more info on the properties to use.
     * @param accountId Account ID (required)
     * @param data Phone Number data (optional)
     * @return ApiResponse&lt;PhoneNumberFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PhoneNumberFull> createAccountPhoneNumberWithHttpInfo(Integer accountId, CreatePhoneNumberParams data) throws ApiException {
        com.squareup.okhttp.Call call = createAccountPhoneNumberCall(accountId, data, null, null);
        Type localVarReturnType = new TypeToken<PhoneNumberFull>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a phone number to an account (asynchronously)
     * See Intro to Account Phone Numbers for more info on the properties to use.
     * @param accountId Account ID (required)
     * @param data Phone Number data (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAccountPhoneNumberAsync(Integer accountId, CreatePhoneNumberParams data, final ApiCallback<PhoneNumberFull> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAccountPhoneNumberCall(accountId, data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PhoneNumberFull>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAccountPhoneNumber */
    private com.squareup.okhttp.Call getAccountPhoneNumberCall(Integer accountId, Integer numberId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountPhoneNumber(Async)");
        }
        
        // verify the required parameter 'numberId' is set
        if (numberId == null) {
            throw new ApiException("Missing the required parameter 'numberId' when calling getAccountPhoneNumber(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/phone-numbers/{number_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "number_id" + "\\}", apiClient.escapeString(numberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Show details of an individual phone number
     * See Intro to Account Phone Numbers for more info on the properties.
     * @param accountId Account ID (required)
     * @param numberId Number ID (required)
     * @return PhoneNumberFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PhoneNumberFull getAccountPhoneNumber(Integer accountId, Integer numberId) throws ApiException {
        ApiResponse<PhoneNumberFull> resp = getAccountPhoneNumberWithHttpInfo(accountId, numberId);
        return resp.getData();
    }

    /**
     * Show details of an individual phone number
     * See Intro to Account Phone Numbers for more info on the properties.
     * @param accountId Account ID (required)
     * @param numberId Number ID (required)
     * @return ApiResponse&lt;PhoneNumberFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PhoneNumberFull> getAccountPhoneNumberWithHttpInfo(Integer accountId, Integer numberId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountPhoneNumberCall(accountId, numberId, null, null);
        Type localVarReturnType = new TypeToken<PhoneNumberFull>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Show details of an individual phone number (asynchronously)
     * See Intro to Account Phone Numbers for more info on the properties.
     * @param accountId Account ID (required)
     * @param numberId Number ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountPhoneNumberAsync(Integer accountId, Integer numberId, final ApiCallback<PhoneNumberFull> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountPhoneNumberCall(accountId, numberId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PhoneNumberFull>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listAccountPhoneNumbers */
    private com.squareup.okhttp.Call listAccountPhoneNumbersCall(Integer accountId, List<String> filtersId, List<String> filtersName, List<String> filtersPhoneNumber, String sortId, String sortName, String sortPhoneNumber, Integer limit, Integer offset, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listAccountPhoneNumbers(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/phone-numbers".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filtersId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "filters[id]", filtersId));
        if (filtersName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "filters[name]", filtersName));
        if (filtersPhoneNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "filters[phone_number]", filtersPhoneNumber));
        if (sortId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort[id]", sortId));
        if (sortName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort[name]", sortName));
        if (sortPhoneNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort[phone_number]", sortPhoneNumber));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get a list of phone numbers registered to an account
     * See Intro to Account Phone Numbers for more info on the properties.
     * @param accountId Account ID (required)
     * @param filtersId ID filter (optional)
     * @param filtersName Name filter (optional)
     * @param filtersPhoneNumber Phone number filter (optional)
     * @param sortId ID sorting (optional)
     * @param sortName Name sorting (optional)
     * @param sortPhoneNumber Phone number sorting (optional)
     * @param limit Max results (optional)
     * @param offset Results to skip (optional)
     * @param fields Field set (optional)
     * @return ListPhoneNumbersFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListPhoneNumbersFull listAccountPhoneNumbers(Integer accountId, List<String> filtersId, List<String> filtersName, List<String> filtersPhoneNumber, String sortId, String sortName, String sortPhoneNumber, Integer limit, Integer offset, String fields) throws ApiException {
        ApiResponse<ListPhoneNumbersFull> resp = listAccountPhoneNumbersWithHttpInfo(accountId, filtersId, filtersName, filtersPhoneNumber, sortId, sortName, sortPhoneNumber, limit, offset, fields);
        return resp.getData();
    }

    /**
     * Get a list of phone numbers registered to an account
     * See Intro to Account Phone Numbers for more info on the properties.
     * @param accountId Account ID (required)
     * @param filtersId ID filter (optional)
     * @param filtersName Name filter (optional)
     * @param filtersPhoneNumber Phone number filter (optional)
     * @param sortId ID sorting (optional)
     * @param sortName Name sorting (optional)
     * @param sortPhoneNumber Phone number sorting (optional)
     * @param limit Max results (optional)
     * @param offset Results to skip (optional)
     * @param fields Field set (optional)
     * @return ApiResponse&lt;ListPhoneNumbersFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListPhoneNumbersFull> listAccountPhoneNumbersWithHttpInfo(Integer accountId, List<String> filtersId, List<String> filtersName, List<String> filtersPhoneNumber, String sortId, String sortName, String sortPhoneNumber, Integer limit, Integer offset, String fields) throws ApiException {
        com.squareup.okhttp.Call call = listAccountPhoneNumbersCall(accountId, filtersId, filtersName, filtersPhoneNumber, sortId, sortName, sortPhoneNumber, limit, offset, fields, null, null);
        Type localVarReturnType = new TypeToken<ListPhoneNumbersFull>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of phone numbers registered to an account (asynchronously)
     * See Intro to Account Phone Numbers for more info on the properties.
     * @param accountId Account ID (required)
     * @param filtersId ID filter (optional)
     * @param filtersName Name filter (optional)
     * @param filtersPhoneNumber Phone number filter (optional)
     * @param sortId ID sorting (optional)
     * @param sortName Name sorting (optional)
     * @param sortPhoneNumber Phone number sorting (optional)
     * @param limit Max results (optional)
     * @param offset Results to skip (optional)
     * @param fields Field set (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAccountPhoneNumbersAsync(Integer accountId, List<String> filtersId, List<String> filtersName, List<String> filtersPhoneNumber, String sortId, String sortName, String sortPhoneNumber, Integer limit, Integer offset, String fields, final ApiCallback<ListPhoneNumbersFull> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAccountPhoneNumbersCall(accountId, filtersId, filtersName, filtersPhoneNumber, sortId, sortName, sortPhoneNumber, limit, offset, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListPhoneNumbersFull>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for replaceAccountPhoneNumber */
    private com.squareup.okhttp.Call replaceAccountPhoneNumberCall(Integer accountId, Integer numberId, ReplacePhoneNumberParams data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling replaceAccountPhoneNumber(Async)");
        }
        
        // verify the required parameter 'numberId' is set
        if (numberId == null) {
            throw new ApiException("Missing the required parameter 'numberId' when calling replaceAccountPhoneNumber(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/phone-numbers/{number_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "number_id" + "\\}", apiClient.escapeString(numberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update the settings for an existing phone number on your account
     * See Intro to Account Phone Numbers for more info on the properties.
     * @param accountId Account ID (required)
     * @param numberId Number ID (required)
     * @param data Phone Number data (optional)
     * @return PhoneNumberFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PhoneNumberFull replaceAccountPhoneNumber(Integer accountId, Integer numberId, ReplacePhoneNumberParams data) throws ApiException {
        ApiResponse<PhoneNumberFull> resp = replaceAccountPhoneNumberWithHttpInfo(accountId, numberId, data);
        return resp.getData();
    }

    /**
     * Update the settings for an existing phone number on your account
     * See Intro to Account Phone Numbers for more info on the properties.
     * @param accountId Account ID (required)
     * @param numberId Number ID (required)
     * @param data Phone Number data (optional)
     * @return ApiResponse&lt;PhoneNumberFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PhoneNumberFull> replaceAccountPhoneNumberWithHttpInfo(Integer accountId, Integer numberId, ReplacePhoneNumberParams data) throws ApiException {
        com.squareup.okhttp.Call call = replaceAccountPhoneNumberCall(accountId, numberId, data, null, null);
        Type localVarReturnType = new TypeToken<PhoneNumberFull>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the settings for an existing phone number on your account (asynchronously)
     * See Intro to Account Phone Numbers for more info on the properties.
     * @param accountId Account ID (required)
     * @param numberId Number ID (required)
     * @param data Phone Number data (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceAccountPhoneNumberAsync(Integer accountId, Integer numberId, ReplacePhoneNumberParams data, final ApiCallback<PhoneNumberFull> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceAccountPhoneNumberCall(accountId, numberId, data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PhoneNumberFull>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
