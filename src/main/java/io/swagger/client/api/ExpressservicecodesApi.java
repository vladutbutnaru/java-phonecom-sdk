/*
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ExpressServiceCodeFull;
import io.swagger.client.model.ListExpressServiceCodesFull;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExpressservicecodesApi {
    private ApiClient apiClient;

    public ExpressservicecodesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExpressservicecodesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getAccountExpressSrvCode */
    private com.squareup.okhttp.Call getAccountExpressSrvCodeCall(Integer accountId, Integer codeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/express-service-codes/{code_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()))
        .replaceAll("\\{" + "code_id" + "\\}", apiClient.escapeString(codeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountExpressSrvCodeValidateBeforeCall(Integer accountId, Integer codeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountExpressSrvCode(Async)");
        }
        
        // verify the required parameter 'codeId' is set
        if (codeId == null) {
            throw new ApiException("Missing the required parameter 'codeId' when calling getAccountExpressSrvCode(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAccountExpressSrvCodeCall(accountId, codeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Show details of an account Express Service Code
     * This service shows the details of an Account Express Service Code.
     * @param accountId Account ID (required)
     * @param codeId Device ID (required)
     * @return ExpressServiceCodeFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExpressServiceCodeFull getAccountExpressSrvCode(Integer accountId, Integer codeId) throws ApiException {
        ApiResponse<ExpressServiceCodeFull> resp = getAccountExpressSrvCodeWithHttpInfo(accountId, codeId);
        return resp.getData();
    }

    /**
     * Show details of an account Express Service Code
     * This service shows the details of an Account Express Service Code.
     * @param accountId Account ID (required)
     * @param codeId Device ID (required)
     * @return ApiResponse&lt;ExpressServiceCodeFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExpressServiceCodeFull> getAccountExpressSrvCodeWithHttpInfo(Integer accountId, Integer codeId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountExpressSrvCodeValidateBeforeCall(accountId, codeId, null, null);
        Type localVarReturnType = new TypeToken<ExpressServiceCodeFull>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Show details of an account Express Service Code (asynchronously)
     * This service shows the details of an Account Express Service Code.
     * @param accountId Account ID (required)
     * @param codeId Device ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountExpressSrvCodeAsync(Integer accountId, Integer codeId, final ApiCallback<ExpressServiceCodeFull> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountExpressSrvCodeValidateBeforeCall(accountId, codeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExpressServiceCodeFull>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listAccountExpressSrvCodes */
    private com.squareup.okhttp.Call listAccountExpressSrvCodesCall(Integer accountId, List<String> filtersId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{account_id}/express-service-codes".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filtersId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "filters[id]", filtersId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAccountExpressSrvCodesValidateBeforeCall(Integer accountId, List<String> filtersId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listAccountExpressSrvCodes(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listAccountExpressSrvCodesCall(accountId, filtersId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the Express Service Code associated with your account in list format
     * See Express Service Codes for more detail.
     * @param accountId Account ID (required)
     * @param filtersId ID filter (optional)
     * @return ListExpressServiceCodesFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListExpressServiceCodesFull listAccountExpressSrvCodes(Integer accountId, List<String> filtersId) throws ApiException {
        ApiResponse<ListExpressServiceCodesFull> resp = listAccountExpressSrvCodesWithHttpInfo(accountId, filtersId);
        return resp.getData();
    }

    /**
     * Get the Express Service Code associated with your account in list format
     * See Express Service Codes for more detail.
     * @param accountId Account ID (required)
     * @param filtersId ID filter (optional)
     * @return ApiResponse&lt;ListExpressServiceCodesFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListExpressServiceCodesFull> listAccountExpressSrvCodesWithHttpInfo(Integer accountId, List<String> filtersId) throws ApiException {
        com.squareup.okhttp.Call call = listAccountExpressSrvCodesValidateBeforeCall(accountId, filtersId, null, null);
        Type localVarReturnType = new TypeToken<ListExpressServiceCodesFull>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the Express Service Code associated with your account in list format (asynchronously)
     * See Express Service Codes for more detail.
     * @param accountId Account ID (required)
     * @param filtersId ID filter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAccountExpressSrvCodesAsync(Integer accountId, List<String> filtersId, final ApiCallback<ListExpressServiceCodesFull> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAccountExpressSrvCodesValidateBeforeCall(accountId, filtersId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListExpressServiceCodesFull>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
