/*
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ListPhoneNumbersRegionsFull;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NumberregionsApi {
    private ApiClient apiClient;

    public NumberregionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NumberregionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for listAvailablePhoneNumberRegions */
    private com.squareup.okhttp.Call listAvailablePhoneNumberRegionsCall(List<String> filtersCountryCode, List<String> filtersNpa, List<String> filtersNxx, List<String> filtersIsTollFree, List<String> filtersCity, List<String> filtersProvincePostalCode, List<String> filtersCountryPostalCode, String sortCountryCode, String sortNpa, String sortNxx, String sortIsTollFree, String sortCity, String sortProvincePostalCode, String sortCountryPostalCode, Integer limit, Integer offset, String fields, List<String> groupBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/phone-numbers/available/regions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filtersCountryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "filters[country_code]", filtersCountryCode));
        if (filtersNpa != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "filters[npa]", filtersNpa));
        if (filtersNxx != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "filters[nxx]", filtersNxx));
        if (filtersIsTollFree != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "filters[is_toll_free]", filtersIsTollFree));
        if (filtersCity != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "filters[city]", filtersCity));
        if (filtersProvincePostalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "filters[province_postal_code]", filtersProvincePostalCode));
        if (filtersCountryPostalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "filters[country_postal_code]", filtersCountryPostalCode));
        if (sortCountryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort[country_code]", sortCountryCode));
        if (sortNpa != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort[npa]", sortNpa));
        if (sortNxx != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort[nxx]", sortNxx));
        if (sortIsTollFree != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort[is_toll_free]", sortIsTollFree));
        if (sortCity != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort[city]", sortCity));
        if (sortProvincePostalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort[province_postal_code]", sortProvincePostalCode));
        if (sortCountryPostalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sort[country_postal_code]", sortCountryPostalCode));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));
        if (groupBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "group_by", groupBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAvailablePhoneNumberRegionsValidateBeforeCall(List<String> filtersCountryCode, List<String> filtersNpa, List<String> filtersNxx, List<String> filtersIsTollFree, List<String> filtersCity, List<String> filtersProvincePostalCode, List<String> filtersCountryPostalCode, String sortCountryCode, String sortNpa, String sortNxx, String sortIsTollFree, String sortCity, String sortProvincePostalCode, String sortCountryPostalCode, Integer limit, Integer offset, String fields, List<String> groupBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listAvailablePhoneNumberRegionsCall(filtersCountryCode, filtersNpa, filtersNxx, filtersIsTollFree, filtersCity, filtersProvincePostalCode, filtersCountryPostalCode, sortCountryCode, sortNpa, sortNxx, sortIsTollFree, sortCity, sortProvincePostalCode, sortCountryPostalCode, limit, offset, fields, groupBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * This service lists the quantities of available phone numbers by region.
     * @param filtersCountryCode Country Code filter (optional)
     * @param filtersNpa Area Code filter (North America only) (optional)
     * @param filtersNxx 2nd set of 3 digits filter (North America only) (optional)
     * @param filtersIsTollFree Toll-free status filter (optional)
     * @param filtersCity City filter (optional)
     * @param filtersProvincePostalCode State or Province filter (optional)
     * @param filtersCountryPostalCode Country filter (optional)
     * @param sortCountryCode International calling code sorting (optional)
     * @param sortNpa Area Code sorting (North America only) (optional)
     * @param sortNxx 2nd set of 3 digits sorting (North America) (optional)
     * @param sortIsTollFree Toll Free status sorting (optional)
     * @param sortCity City sorting (optional)
     * @param sortProvincePostalCode State or Province sorting (optional)
     * @param sortCountryPostalCode Country sorting (optional)
     * @param limit Max results (optional)
     * @param offset Results to skip (optional)
     * @param fields Field set (optional)
     * @param groupBy Fields to group by (supports the same set of fields as the filters and sorting) (optional)
     * @return ListPhoneNumbersRegionsFull
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListPhoneNumbersRegionsFull listAvailablePhoneNumberRegions(List<String> filtersCountryCode, List<String> filtersNpa, List<String> filtersNxx, List<String> filtersIsTollFree, List<String> filtersCity, List<String> filtersProvincePostalCode, List<String> filtersCountryPostalCode, String sortCountryCode, String sortNpa, String sortNxx, String sortIsTollFree, String sortCity, String sortProvincePostalCode, String sortCountryPostalCode, Integer limit, Integer offset, String fields, List<String> groupBy) throws ApiException {
        ApiResponse<ListPhoneNumbersRegionsFull> resp = listAvailablePhoneNumberRegionsWithHttpInfo(filtersCountryCode, filtersNpa, filtersNxx, filtersIsTollFree, filtersCity, filtersProvincePostalCode, filtersCountryPostalCode, sortCountryCode, sortNpa, sortNxx, sortIsTollFree, sortCity, sortProvincePostalCode, sortCountryPostalCode, limit, offset, fields, groupBy);
        return resp.getData();
    }

    /**
     * 
     * This service lists the quantities of available phone numbers by region.
     * @param filtersCountryCode Country Code filter (optional)
     * @param filtersNpa Area Code filter (North America only) (optional)
     * @param filtersNxx 2nd set of 3 digits filter (North America only) (optional)
     * @param filtersIsTollFree Toll-free status filter (optional)
     * @param filtersCity City filter (optional)
     * @param filtersProvincePostalCode State or Province filter (optional)
     * @param filtersCountryPostalCode Country filter (optional)
     * @param sortCountryCode International calling code sorting (optional)
     * @param sortNpa Area Code sorting (North America only) (optional)
     * @param sortNxx 2nd set of 3 digits sorting (North America) (optional)
     * @param sortIsTollFree Toll Free status sorting (optional)
     * @param sortCity City sorting (optional)
     * @param sortProvincePostalCode State or Province sorting (optional)
     * @param sortCountryPostalCode Country sorting (optional)
     * @param limit Max results (optional)
     * @param offset Results to skip (optional)
     * @param fields Field set (optional)
     * @param groupBy Fields to group by (supports the same set of fields as the filters and sorting) (optional)
     * @return ApiResponse&lt;ListPhoneNumbersRegionsFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListPhoneNumbersRegionsFull> listAvailablePhoneNumberRegionsWithHttpInfo(List<String> filtersCountryCode, List<String> filtersNpa, List<String> filtersNxx, List<String> filtersIsTollFree, List<String> filtersCity, List<String> filtersProvincePostalCode, List<String> filtersCountryPostalCode, String sortCountryCode, String sortNpa, String sortNxx, String sortIsTollFree, String sortCity, String sortProvincePostalCode, String sortCountryPostalCode, Integer limit, Integer offset, String fields, List<String> groupBy) throws ApiException {
        com.squareup.okhttp.Call call = listAvailablePhoneNumberRegionsValidateBeforeCall(filtersCountryCode, filtersNpa, filtersNxx, filtersIsTollFree, filtersCity, filtersProvincePostalCode, filtersCountryPostalCode, sortCountryCode, sortNpa, sortNxx, sortIsTollFree, sortCity, sortProvincePostalCode, sortCountryPostalCode, limit, offset, fields, groupBy, null, null);
        Type localVarReturnType = new TypeToken<ListPhoneNumbersRegionsFull>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This service lists the quantities of available phone numbers by region.
     * @param filtersCountryCode Country Code filter (optional)
     * @param filtersNpa Area Code filter (North America only) (optional)
     * @param filtersNxx 2nd set of 3 digits filter (North America only) (optional)
     * @param filtersIsTollFree Toll-free status filter (optional)
     * @param filtersCity City filter (optional)
     * @param filtersProvincePostalCode State or Province filter (optional)
     * @param filtersCountryPostalCode Country filter (optional)
     * @param sortCountryCode International calling code sorting (optional)
     * @param sortNpa Area Code sorting (North America only) (optional)
     * @param sortNxx 2nd set of 3 digits sorting (North America) (optional)
     * @param sortIsTollFree Toll Free status sorting (optional)
     * @param sortCity City sorting (optional)
     * @param sortProvincePostalCode State or Province sorting (optional)
     * @param sortCountryPostalCode Country sorting (optional)
     * @param limit Max results (optional)
     * @param offset Results to skip (optional)
     * @param fields Field set (optional)
     * @param groupBy Fields to group by (supports the same set of fields as the filters and sorting) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAvailablePhoneNumberRegionsAsync(List<String> filtersCountryCode, List<String> filtersNpa, List<String> filtersNxx, List<String> filtersIsTollFree, List<String> filtersCity, List<String> filtersProvincePostalCode, List<String> filtersCountryPostalCode, String sortCountryCode, String sortNpa, String sortNxx, String sortIsTollFree, String sortCity, String sortProvincePostalCode, String sortCountryPostalCode, Integer limit, Integer offset, String fields, List<String> groupBy, final ApiCallback<ListPhoneNumbersRegionsFull> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAvailablePhoneNumberRegionsValidateBeforeCall(filtersCountryCode, filtersNpa, filtersNxx, filtersIsTollFree, filtersCity, filtersProvincePostalCode, filtersCountryPostalCode, sortCountryCode, sortNpa, sortNxx, sortIsTollFree, sortCity, sortProvincePostalCode, sortCountryPostalCode, limit, offset, fields, groupBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListPhoneNumbersRegionsFull>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
