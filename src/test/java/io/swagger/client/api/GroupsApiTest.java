/**
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import static io.swagger.client.helper.TestConfig.GREATER_THAN_FILTER;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.List;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import io.swagger.client.ApiException;
import io.swagger.client.helper.TestConfig;
import io.swagger.client.model.CreateGroupParams;
import io.swagger.client.model.DeleteGroup;
import io.swagger.client.model.FilterIdNameArray;
import io.swagger.client.model.GroupFull;
import io.swagger.client.model.ListGroups;
import io.swagger.client.model.SortIdName;
/**
 * API tests for GroupsApi
 */
public class GroupsApiTest {

    private final GroupsApi api = new GroupsApi();

    @Before
    public void initTest() {
    	TestConfig.setAuthorization();
    }
    
    @Test
    public void createGetReplaceDeleteGroup() throws ApiException {

    	// Create
    	Integer accountId = 1315091;
        Integer extensionId = 1767963;
        CreateGroupParams data = new CreateGroupParams();
        String name = "name" + TestConfig.nextRandom();
		data.setName(name);

		

		GroupFull responseCreate = api.createAccountExtensionContactGroup(accountId, extensionId, data);
        assertNotNull(responseCreate);
        assertEquals(name, responseCreate.getName());

        // Get After Create
        GroupFull responseGetAfterCreate = 
        		api.getAccountExtensionContactGroup(accountId, extensionId, responseCreate.getId());
        assertNotNull(responseGetAfterCreate);
        assertEquals(name, responseCreate.getName());


        // Replace
        String name2 = "idroeG";
        data.setName(name2);
        GroupFull responseReplace = api.replaceAccountExtensionContactGroup(accountId, extensionId, responseCreate.getId(), data);
        assertNotNull(responseReplace);

        // Get After Replace
        GroupFull responseGetAfterReplace = 
        		api.getAccountExtensionContactGroup(accountId, extensionId, responseCreate.getId());
        assertNotNull(responseGetAfterReplace);
        assertEquals(name2, responseGetAfterReplace.getName());
        
        // Delete
        DeleteGroup responseDelete = api.deleteAccountExtensionContactGroup(accountId, extensionId, responseReplace.getId());
        assertNotNull(responseDelete);
        assertEquals(true, responseDelete.getSuccess());
    }
    
    /**
     * 
     *
     * See Account Contact Groups for more info on the properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in previous test")
    public void createAccountExtensionContactGroupTest() throws ApiException {
        Integer accountId = null;
        Integer extensionId = null;
        CreateGroupParams data = null;
        GroupFull response = api.createAccountExtensionContactGroup(accountId, extensionId, data);

        assertNotNull(response);
    }
    
    /**
     * Delete an addressbook group
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in previous test")
    public void deleteAccountExtensionContactGroupTest() throws ApiException {
        Integer accountId = null;
        Integer extensionId = null;
        Integer groupId = null;
        DeleteGroup response = api.deleteAccountExtensionContactGroup(accountId, extensionId, groupId);

        assertNotNull(response);
    }
    
    /**
     * 
     *
     * See Account Contact Groups for more info on the properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in previous test")
    public void getAccountExtensionContactGroupTest() throws ApiException {
        Integer accountId = 1315091;
        Integer extensionId = 1764590;
        Integer groupId = null;
        GroupFull response = api.getAccountExtensionContactGroup(accountId, extensionId, groupId);

        assertNotNull(response);
    }
    
    /**
     * Show a list of contact groups belonging to an extension
     *
     * See Account Contact Groups for details on the properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listGetAccountExtensionContactGroupsTest() throws ApiException {

        Integer accountId = 1315091;
        Integer extensionId = 1764590;
        List<String> filtersId = TestConfig.createDefaultFilter();
        List<String> filtersName = TestConfig.createDefaultFilter();
        String sortId = "asc";
        String sortName = "asc";
        Integer limit = 4;
        Integer offset = 1;
        String fields = null;
        
        // When
        ListGroups response = api.listAccountExtensionContactGroups(accountId, extensionId, filtersId, filtersName, sortId, sortName, limit, offset, fields);

        // Then
        assertNotNull(response);
        List<GroupFull> items = response.getItems();
        assertNotNull(items);
        
        FilterIdNameArray filters = response.getFilters();
        assertNotNull(filters);
        assertEquals(GREATER_THAN_FILTER, filters.getId());
        
        assertEquals(GREATER_THAN_FILTER, filters.getName());
        
        Integer limitActual = response.getLimit();
        assertNotNull(limitActual);
        assertEquals(limit, limitActual);
        
        Integer offsetActual = response.getOffset();
        assertNotNull(offsetActual);
        assertEquals(offset, offsetActual);
        
        SortIdName sort = response.getSort();
        assertNotNull(sort);
        assertEquals(sortId, sort.getId());
        
        assertEquals(sortName, sort.getName());
        
        if (items.size() > 0) {
	        Integer firstItemId = response.getItems().get(0).getId();
	        GroupFull getGroupResponse = api.getAccountExtensionContactGroup(accountId, extensionId, firstItemId);
	        assertNotNull(getGroupResponse.getId());
	        assertNotNull(getGroupResponse.getName());
        }
    }
    
    /**
     * 
     *
     * See Account Contact Groups for more info on the properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in previous test")
    public void replaceAccountExtensionContactGroupTest() throws ApiException {

        Integer accountId = null;
        Integer extensionId = null;
        Integer groupId = null;
        CreateGroupParams data = new CreateGroupParams();
        String name = "Geordi";
		data.setName(name);
        GroupFull response = api.replaceAccountExtensionContactGroup(accountId, extensionId, groupId, data);

        assertNotNull(response);
    }
    
}
