/**
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import static io.swagger.client.helper.TestConfig.GREATER_THAN_FILTER;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.List;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import io.swagger.client.ApiException;
import io.swagger.client.helper.TestConfig;
import io.swagger.client.model.ContactFull;
import io.swagger.client.model.CreateContactParams;
import io.swagger.client.model.DeleteContact;
import io.swagger.client.model.FilterIdGroupIdUpdatedAtArray;
import io.swagger.client.model.ListContacts;
import io.swagger.client.model.SortIdUpdatedAt;
/**
 * API tests for ContactsApi
 */
public class ContactsApiTest {

    private final ContactsApi api = new ContactsApi();

    @Before
    public void initTest() {
    	TestConfig.setAuthorization();
    }
    
    @Test
    public void createGetReplaceDeleteContact() throws ApiException {

    	// Create
    	Integer accountId = 1315091;
        Integer extensionId = 1764590;
        CreateContactParams data = new CreateContactParams();
        String firstName = "Geordi";
		data.setFirstName(firstName);
        String lastName = "La Forge";
		data.setLastName(lastName);
		String company = "Company";
		data.setCompany(company);
		String department = "Department";
		data.setDepartment(department);
		String jobTitle = "JobTitle";
		data.setJobTitle(jobTitle );
		String middleName = "Middle Name";
		data.setMiddleName(middleName);
		String nickname = "Nickname";
		data.setNickname(nickname);
		String phoneticFirstName = "Phonetic First Name";
		data.setPhoneticFirstName(phoneticFirstName);
		String phoneticLastName = "Phonetic Last Name";
		data.setPhoneticLastName(phoneticLastName);
		String phoneticMiddleName = "Phonetic Middle Name";
		data.setPhoneticMiddleName(phoneticMiddleName);
		String prefix = "Prefix";
		data.setPrefix(prefix);
		String suffix = "Sufix";
		data.setSuffix(suffix);

		// TODO: Note that there is no very straightforward way to create "Object" in java
//		List<Object> emails = new ArrayList<>();
//		data.setEmails(emails);

        ContactFull responseCreate = api.createAccountExtensionContact(accountId, extensionId, data);
        assertNotNull(responseCreate);
        assertEquals(firstName, responseCreate.getFirstName());
        assertEquals(lastName, responseCreate.getLastName());
        assertEquals(company, responseCreate.getCompany());
        assertEquals(department, responseCreate.getDepartment());
        assertEquals(jobTitle, responseCreate.getJobTitle());
        assertEquals(middleName, responseCreate.getMiddleName());
        assertEquals(nickname, responseCreate.getNickname());
        assertEquals(phoneticFirstName, responseCreate.getPhoneticFirstName());
        assertEquals(phoneticLastName, responseCreate.getPhoneticLastName());
        assertEquals(phoneticMiddleName, responseCreate.getPhoneticMiddleName());
        assertEquals(prefix, responseCreate.getPrefix());
        assertEquals(suffix, responseCreate.getSuffix());

        // Get After Create
        ContactFull responseGetAfterCreate = 
        		api.getAccountExtensionContact(accountId, extensionId, responseCreate.getId());
        assertNotNull(responseGetAfterCreate);
        assertEquals(firstName, responseCreate.getFirstName());
        assertEquals(lastName, responseCreate.getLastName());
        assertEquals(company, responseCreate.getCompany());
        assertEquals(department, responseCreate.getDepartment());
        assertEquals(jobTitle, responseCreate.getJobTitle());
        assertEquals(middleName, responseCreate.getMiddleName());
        assertEquals(nickname, responseCreate.getNickname());
        assertEquals(phoneticFirstName, responseCreate.getPhoneticFirstName());
        assertEquals(phoneticLastName, responseCreate.getPhoneticLastName());
        assertEquals(phoneticMiddleName, responseCreate.getPhoneticMiddleName());
        assertEquals(prefix, responseCreate.getPrefix());
        assertEquals(suffix, responseCreate.getSuffix());

        // TODO: [API Error] Replace call misses contact id to be replaced.
        // In the API docs there does not exist a parameter for the contact id

        // Replace
        data.setJobTitle("title");
        ContactFull responseReplace = api.replaceAccountExtensionContact(accountId, extensionId, responseCreate.getId(), data);
        assertNotNull(responseReplace);

        // Get After Replace
        ContactFull responseGetAfterReplace = 
        		api.getAccountExtensionContact(accountId, extensionId, responseCreate.getId());
        assertNotNull(responseGetAfterReplace);
        assertEquals(firstName, responseGetAfterReplace.getFirstName());
        
        // Delete
        DeleteContact responseDelete = api.deleteAccountExtensionContact(accountId, extensionId, responseCreate.getId());
        assertNotNull(responseDelete);
        assertEquals(true, responseDelete.getSuccess());
    }
    
    /**
     * Add a new address book contact for an extension
     *
     * For more on the input fields, see Account Contacts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in previous test")
    public void createAccountExtensionContactTest() throws ApiException {

        Integer accountId = 1315091;
        Integer extensionId = 1764590;
        CreateContactParams data = new CreateContactParams();
        
        ContactFull response = api.createAccountExtensionContact(accountId, extensionId, data);
        
        assertNotNull(response);
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in previous test")
    public void deleteAccountExtensionContactTest() throws ApiException {
        Integer accountId = null;
        Integer extensionId = null;
        Integer contactId = null;
        DeleteContact response = api.deleteAccountExtensionContact(accountId, extensionId, contactId);

        assertNotNull(response);
    }
    
    /**
     * Retrieve the details of an address book contact
     *
     * For more info on the fields shown, see Account Contacts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested multiple times in previous test")
    public void getAccountExtensionContactTest() throws ApiException {
        Integer accountId = 1315091;
        Integer extensionId = 1764590;
        Integer contactId = null;
        ContactFull response = api.getAccountExtensionContact(accountId, extensionId, contactId);
        
        assertNotNull(response);
    }
    
    /**
     * Show a list of address book contacts
     *
     * See Account Contacts for more info on the fields in each item.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAccountExtensionContactsTest() throws ApiException {
    	
    	Integer accountId = 1315091;
        Integer extensionId = 1764590;
        List<String> filtersId = TestConfig.createDefaultFilter();
        List<String> filtersGroupId = TestConfig.createDefaultFilter();
        List<String> filtersUpdatedAt = TestConfig.createDefaultFilter();
        String sortId = "asc";
        String sortUpdatedAt = "asc";
        Integer limit = 4;
        Integer offset = 1;
        String fields = null;
        
        // When
        ListContacts response = api.listAccountExtensionContacts(accountId, extensionId, filtersId, filtersGroupId, filtersUpdatedAt, sortId, sortUpdatedAt, limit, offset, fields);

        // Then
        assertNotNull(response);
        List<ContactFull> items = response.getItems();
        assertNotNull(items);
        
        FilterIdGroupIdUpdatedAtArray filters = response.getFilters();
        assertNotNull(filters);
        assertEquals(GREATER_THAN_FILTER, filters.getId());
        
        assertEquals(GREATER_THAN_FILTER, filters.getGroupId());
        
        assertEquals(GREATER_THAN_FILTER, filters.getUpdatedAt());
        
        Integer limitActual = response.getLimit();
        assertNotNull(limitActual);
        assertEquals(limit, limitActual);
        
        Integer offsetActual = response.getOffset();
        assertNotNull(offsetActual);
        assertEquals(offset, offsetActual);
        
        SortIdUpdatedAt sort = response.getSort();
        assertNotNull(sort);
        assertEquals(sortId, sort.getId());
        
        assertEquals(sortUpdatedAt, sort.getUpdatedAt());
    }
    
    /**
     * 
     *
     * For more on the input fields, see Account Contacts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in previous test")
    public void replaceAccountExtensionContactTest() throws ApiException {
        Integer accountId = null;
        Integer extensionId = null;
        Integer contactId = null;
        CreateContactParams data = null;

        ContactFull response = api.replaceAccountExtensionContact(accountId, extensionId, contactId, data);

        assertNotNull(response);
    }
    
}
