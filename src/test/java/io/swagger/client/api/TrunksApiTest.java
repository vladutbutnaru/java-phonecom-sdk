/**
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.List;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import io.swagger.client.ApiException;
import io.swagger.client.helper.TestConfig;
import io.swagger.client.model.CreateTrunkParams;
import io.swagger.client.model.DeleteTrunk;
import io.swagger.client.model.ListTrunks;
import io.swagger.client.model.TrunkFull;

/**
 * API tests for TrunksApi
 */
public class TrunksApiTest {

    private final TrunksApi api = new TrunksApi();

    @Before
    public void initTest() {
    	TestConfig.setAuthorization();
    }
    
    @Test
    public void createGetReplaceDeleteTrunk() throws ApiException {
    	Integer accountId = 1315091;
        CreateTrunkParams data = new CreateTrunkParams();
        String trunkName = "trunkName" + TestConfig.nextRandom();
		data.setName(trunkName);
		data.setUri("SIP/1234@phone.com:5060");
		data.setMaxConcurrentCalls(3);
		data.setMaxMinutesPerMonth(1000);
		
		TrunkFull response = api.createAccountTrunk(accountId, data);
		assertNotNull(response.getCodecs());
//		assertNotNull(response.getErrorMessage());
//		assertNotNull(response.getGreeting());
		assertNotNull(response.getId());
		assertNotNull(response.getMaxConcurrentCalls());
		assertNotNull(response.getMaxMinutesPerMonth());
		assertNotNull(response.getName());
		assertNotNull(response.getUri());
		
		Integer trunkId = response.getId();
		
		CreateTrunkParams dataReplace = new CreateTrunkParams();
		String trunkName2 = "trunkName" + TestConfig.nextRandom();
		dataReplace.setName(trunkName2);
		dataReplace.setUri("SIP/1235@phone.com:5060");
		dataReplace.setMaxConcurrentCalls(4);
		dataReplace.setMaxMinutesPerMonth(950);
		
		TrunkFull responeReplace = api.replaceAccountTrunk(accountId, trunkId, dataReplace);
		assertEquals(trunkName2, responeReplace.getName());
		assertEquals("SIP/1235@phone.com:5060", responeReplace.getUri());
		assertEquals(new Integer(4), responeReplace.getMaxConcurrentCalls());
		assertEquals(new Integer(950), responeReplace.getMaxMinutesPerMonth());
		
		DeleteTrunk responseDelete = api.deleteAccountTrunk(accountId, trunkId);
		assertTrue(responseDelete.getSuccess());
    }
    
    /**
     * Add a trunk record with SIP information
     *
     * For more on the input fields, see Account Trunks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAccountTrunkTest() throws ApiException {
        Integer accountId = 1315091;
        CreateTrunkParams data = new CreateTrunkParams();
//        data.setErrorMessage("ERROR");
        data.setMaxMinutesPerMonth(800);
        data.setMaxConcurrentCalls(60);
//        data.setGreeting("HELLO");
        data.setUri("SIP/1234@phone.com:5060");
        data.setName("NAMENAMENAME");
        TrunkFull response = api.createAccountTrunk(accountId, data);

        assertNotNull(response);
    }
    
    /**
     * Delete a trunk from account
     *
     * This service deletes a trunk from the account. For more on the properties of trunks, see Account Trunks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in other test")
    public void deleteAccountTrunkTest() throws ApiException {
        Integer accountId = null;
        Integer trunkId = null;
        DeleteTrunk response = api.deleteAccountTrunk(accountId, trunkId);
        assertNotNull(response);
    }
    
    /**
     * Show details of an individual trunk
     *
     * This service shows the details of an individual Trunk.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in listget")
    public void getAccountTrunkTest() throws ApiException {
        Integer accountId = null;
        Integer trunkId = null;
        TrunkFull response = api.getAccountTrunk(accountId, trunkId);
        assertNotNull(response);
    }
    
    /**
     * Get a list of trunks for an account
     *
     * See Account Trunks for more info on the properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listGetAccountTrunksTest() throws ApiException {
        Integer accountId = 1315091;
        List<String> filtersId = null;
        List<String> filtersName = null;
        String sortId = null;
        String sortName = null;
        Integer limit = null;
        Integer offset = null;
        String fields = null;
        ListTrunks response = api.listAccountTrunks(accountId, filtersId, filtersName, sortId, sortName, limit, offset, fields);
        assertNotNull(response.getFilters());
        List<TrunkFull> items = response.getItems();
		assertNotNull(items);
        assertNotNull(response.getLimit());
        assertNotNull(response.getOffset());
        assertNotNull(response.getSort());
        assertNotNull(response.getTotal());
        
        if (items.size() > 0) {
	        Integer firstItemId = items.get(0).getId();
	        TrunkFull getTrunkResponse = api.getAccountTrunk(accountId, firstItemId);
	        assertNotNull(getTrunkResponse.getCodecs());
	//        assertNotNull(getTrunkResponse.getErrorMessage());
	//        assertNotNull(getTrunkResponse.getGreeting());
	        assertNotNull(getTrunkResponse.getId());
	        assertNotNull(getTrunkResponse.getMaxConcurrentCalls());
	        assertNotNull(getTrunkResponse.getMaxMinutesPerMonth());
	        assertNotNull(getTrunkResponse.getName());
	        assertNotNull(getTrunkResponse.getUri());
        }
    }
    
    /**
     * Replace parameters in a trunk
     *
     * For more on the input fields, see Account Trunks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in other test")
    public void replaceAccountTrunkTest() throws ApiException {
        Integer accountId = null;
        Integer trunkId = null;
        CreateTrunkParams data = null;
        TrunkFull response = api.replaceAccountTrunk(accountId, trunkId, data);
        assertNotNull(response);
    }
    
}
