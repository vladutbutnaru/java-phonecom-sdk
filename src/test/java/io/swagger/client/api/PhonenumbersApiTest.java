/**
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.helper.TestConfig;
import io.swagger.client.model.PhoneNumberFull;
import io.swagger.client.model.PhoneNumbersFull;
import io.swagger.client.model.ApplicationFull;
import io.swagger.client.model.CreatePhoneNumberParams;
import io.swagger.client.model.FilterIdNameArray;
import io.swagger.client.model.FilterIdNamePhoneNumberArray;
import io.swagger.client.model.ListPhoneNumbersFull;
import io.swagger.client.model.ReplacePhoneNumberParams;
import io.swagger.client.model.SortIdName;
import io.swagger.client.model.SortIdNamePhoneNumber;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PhonenumbersApi
 */
public class PhonenumbersApiTest {

    private final PhonenumbersApi api = new PhonenumbersApi();

    @Before
    public void initTest() {
    	TestConfig.setAuthorization();
    }
    
    /**
     * Add a phone number to an account
     *
     * See Intro to Account Phone Numbers for more info on the properties to use.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAccountPhoneNumberTest() throws ApiException {
        Integer accountId = null;
        CreatePhoneNumberParams data = null;
        // PhoneNumberFull response = api.createAccountPhoneNumber(accountId, data);

        // TODO: test validations
    }
    
    /**
     * Show details of an individual phone number
     *
     * See Intro to Account Phone Numbers for more info on the properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountPhoneNumberTest() throws ApiException {
        Integer accountId = null;
        Integer numberId = null;
        // PhoneNumberFull response = api.getAccountPhoneNumber(accountId, numberId);

        // TODO: test validations
    }
    
    /**
     * Get a list of phone numbers registered to an account
     *
     * See Intro to Account Phone Numbers for more info on the properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAccountPhoneNumbersTest() throws ApiException {
        Integer accountId = 1315091;
        List<String> filtersId = null;
        List<String> filtersName = null;
        List<String> filtersPhoneNumber = null;
        String sortId = null;
        String sortName = null;
        String sortPhoneNumber = null;
        Integer limit = null;
        Integer offset = null;
        String fields = null;
        ListPhoneNumbersFull response = api.listAccountPhoneNumbers(accountId, filtersId, filtersName, filtersPhoneNumber, sortId, sortName, sortPhoneNumber, limit, offset, fields);

        assertNotNull(response);
        PhoneNumbersFull items = response.getItems();
        assertNotNull(items);
        FilterIdNamePhoneNumberArray filters = response.getFilters();
        assertNotNull(filters);
        Integer limit2 = response.getLimit();
        assertNotNull(limit2);
        Integer offset2 = response.getOffset();
        assertNotNull(offset2);
        SortIdNamePhoneNumber sort = response.getSort();
        assertNotNull(sort);
    }
    
    /**
     * Update the settings for an existing phone number on your account
     *
     * See Intro to Account Phone Numbers for more info on the properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAccountPhoneNumberTest() throws ApiException {
        Integer accountId = null;
        Integer numberId = null;
        ReplacePhoneNumberParams data = null;
        // PhoneNumberFull response = api.replaceAccountPhoneNumber(accountId, numberId, data);

        // TODO: test validations
    }
    
}
