/**
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import io.swagger.client.ApiException;
import io.swagger.client.helper.TestConfig;
import io.swagger.client.model.CreateRouteParams;
import io.swagger.client.model.DeleteRoute;
import io.swagger.client.model.ListQueues;
import io.swagger.client.model.ListRoutes;
import io.swagger.client.model.QueueFull;
import io.swagger.client.model.QueueSummary;
import io.swagger.client.model.RouteFull;
import io.swagger.client.model.RuleSet;
import io.swagger.client.model.RuleSetAction;

/**
 * API tests for RoutesApi
 */
public class RoutesApiTest {

	private final RoutesApi api = new RoutesApi();
	private final QueuesApi queuesApi = new QueuesApi();

	@Before
	public void initTest() {
		TestConfig.setAuthorization();
	}
	
	@Test
	public void createGetReplaceDeleteRouteTest() throws ApiException {
		Integer accountId = 1315091;
		CreateRouteParams data = new CreateRouteParams();
		data.setName("name" + TestConfig.nextRandom());
		
		RuleSetAction action = new RuleSetAction();
		action.action("queue");
		
		ListQueues queues = queuesApi.listAccountQueues(accountId, null, null, null, null, 25, 0, null);
		QueueFull firstQueue = queues.getItems().get(0);

		QueueSummary queue = new QueueSummary();
		queue.id(firstQueue.getId());
		queue.name(firstQueue.getName());
		
		action.queue(queue);
		List<RuleSetAction> actions = new ArrayList<>();
		
		actions.add(action);
		
		RuleSet rule = new RuleSet();
		rule.actions(actions);
		
		List<Object> rules = new ArrayList<>();
		rules.add(rule);

		data.setRules(rules);
		
		RouteFull response = api.createRoute(accountId, data);
		assertNotNull(response);
		
		Integer routeId = response.getId();
		
		CreateRouteParams dataReplace = new CreateRouteParams();
		String name2 = "name" + TestConfig.nextRandom();
		dataReplace.setName(name2);

		dataReplace.setRules(rules);
		dataReplace.setExtension(response.getExtension());
		RouteFull responseReplace = api.replaceAccountRoute(accountId, routeId, dataReplace);
		assertNotNull(responseReplace);
		
		DeleteRoute responseDelete = api.deleteAccountRoute(accountId, routeId);
		assertTrue(responseDelete.getSuccess());
	}

	/**
	 * Add a new address book contact for an extension
	 *
	 * For more on the input fields, see Intro to Routes.
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void createRouteTest() throws ApiException {
		Integer accountId = 1315091;
		CreateRouteParams data = new CreateRouteParams();
//		data.setExtension("test");
		data.setName("name" + TestConfig.nextRandom());
		
		RuleSetAction action = new RuleSetAction();
		action.action("queue");
		
		ListQueues queues = queuesApi.listAccountQueues(accountId, null, null, null, null, 25, 0, null);
		QueueFull firstQueue = queues.getItems().get(0);

		QueueSummary queue = new QueueSummary();
		queue.id(firstQueue.getId());
		queue.name(firstQueue.getName());
		
		action.queue(queue);
		List<RuleSetAction> actions = new ArrayList<>();
		
		actions.add(action);
		
		RuleSet rule = new RuleSet();
		rule.actions(actions);
		
		List<Object> rules = new ArrayList<>();
		rules.add(rule);

		data.setRules(rules);
		
		RouteFull response = api.createRoute(accountId, data);
		assertNotNull(response);
	}

	/**
	 * 
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void deleteAccountRouteTest() throws ApiException {
		Integer accountId = null;
		Integer routeId = null;
		// DeleteRoute response = api.deleteAccountRoute(accountId, routeId);

		// TODO: test validations
	}

	/**
	 * Show details of an individual route
	 *
	 * This service shows the details of an individual route.
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	@Ignore("tested in other test")
	public void getAccountRouteTest() throws ApiException {
		Integer accountId = 1315091;
		Integer routeId = null;
		RouteFull response = api.getAccountRoute(accountId, routeId);
		assertNotNull(response);
	}

	/**
	 * Get a list of routes for an account
	 *
	 * See Intro to Routes for more info on the properties.
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void listGetAccountRoutesTest() throws ApiException {

		Integer accountId = 1315091;
		List<String> filtersId = null;
		List<String> filtersName = null;
		String sortId = null;
		String sortName = null;
		Integer limit = null;
		Integer offset = null;
		String fields = null;
		ListRoutes response = api.listAccountRoutes(accountId, filtersId, filtersName, sortId, sortName, limit,
				offset, fields);
		assertNotNull(response.getFilters());
		List<RouteFull> items = response.getItems();
		assertNotNull(items);
		assertNotNull(response.getLimit());
		assertNotNull(response.getOffset());
		assertNotNull(response.getSort());
		assertNotNull(response.getTotal());
		
		if (items.size() > 0) {
			RouteFull routeFull = items.get(0);
			Integer firstItemId = routeFull.getId();
			RouteFull getRouteResponse = api.getAccountRoute(accountId, firstItemId);
		//		assertNotNull(getRouteResponse.getExtension());
			assertNotNull(getRouteResponse.getId());
			assertNotNull(getRouteResponse.getName());
			assertNotNull(getRouteResponse.getRules());
		}
	}

	/**
	 * 
	 *
	 * For more on the input fields, see Intro to Routes.
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	@Ignore("Tested in other test")
	public void replaceAccountRouteTest() throws ApiException {
		Integer accountId = null;
		Integer routeId = null;
		CreateRouteParams data = null;
		RouteFull response = api.replaceAccountRoute(accountId, routeId, data);
		assertNotNull(response);
	}

}
