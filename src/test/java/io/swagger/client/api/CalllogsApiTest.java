/**
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import static io.swagger.client.helper.TestConfig.GREATER_THAN_FILTER;
import static io.swagger.client.helper.TestConfig.LESS_THAN_FILTER;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.List;

import org.junit.Before;
import org.junit.Test;

import io.swagger.client.ApiException;
import io.swagger.client.helper.TestConfig;
import io.swagger.client.model.CallLogFull;
import io.swagger.client.model.FilterCallLogs;
import io.swagger.client.model.ListCallLogsFull;
import io.swagger.client.model.SortCallLogs;
/**
 * API tests for CalllogsApi
 */
public class CalllogsApiTest {

    private final CalllogsApi api = new CalllogsApi();

    @Before
    public void initTest() {
    	TestConfig.setAuthorization();
    }
    
    /**
     * Get a list of call details associated with your account
     *
     * Fetch a list of call logs associated with your account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAccountCallLogsTest() throws ApiException {

        Integer accountId = 1315091;
        List<String> filtersId = TestConfig.createDefaultFilter();
        List<String> filtersStartTime = TestConfig.createDefaultFilter();
        String filtersCreatedAt = LESS_THAN_FILTER;
        String filtersDirection = null;
        String filtersCalledNumber = LESS_THAN_FILTER;
        String filtersType = null;
        List<String> filtersExtension = TestConfig.createDefaultFilter();
        String sortId = "asc";
        String sortStartTime = "asc";
        String sortCreatedAt = "desc";
        Integer limit = 4;
        Integer offset = 1;
        String fields = null;
        ListCallLogsFull response = api.listAccountCallLogs(accountId, filtersId, filtersStartTime, filtersCreatedAt, filtersDirection, filtersCalledNumber, filtersType, filtersExtension, sortId, sortStartTime, sortCreatedAt, limit, offset, fields);

        assertNotNull(response);
        List<CallLogFull> items = response.getItems();
        assertNotNull(items);
        
        FilterCallLogs filters = response.getFilters();
        assertNotNull(filters);
        assertEquals(GREATER_THAN_FILTER, filters.getId());
        
        assertEquals(GREATER_THAN_FILTER, filters.getId());
        
        assertEquals(GREATER_THAN_FILTER, filters.getId());
        
        assertEquals(filtersCreatedAt, filters.getCreatedAt());
        
        // TODO API response: "@message": "Internal Server Error"
//        assertEquals(filtersDirection, filters.getDirection());
        
        assertEquals(filtersCalledNumber, filters.getCalledNumber());

        // TODO API response: "@message": "Internal Server Error"
//        assertEquals(filtersType, filters.getType());
        
        Integer limitActual = response.getLimit();
        assertNotNull(limitActual);
        assertEquals(limit, limitActual);
        
        Integer offsetActual = response.getOffset();
        assertNotNull(offsetActual);
        assertEquals(offset, offsetActual);

        SortCallLogs sort = response.getSort();
        assertNotNull(sort);
        assertEquals(sortId, sort.getId());

        assertEquals(sortStartTime, sort.getStartTime());

        assertEquals(sortCreatedAt, sort.getCreatedAt());
    }
    
}
