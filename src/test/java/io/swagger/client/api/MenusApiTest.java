/**
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import static org.junit.Assert.*;

import java.util.List;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import io.swagger.client.ApiException;
import io.swagger.client.helper.TestConfig;
import io.swagger.client.model.CreateMenuParams;
import io.swagger.client.model.DeleteMenu;
import io.swagger.client.model.ListMenusFull;
import io.swagger.client.model.MenuFull;
import io.swagger.client.model.ReplaceMenuParams;

/**
 * API tests for MenusApi
 */
public class MenusApiTest {

    private final MenusApi api = new MenusApi();

    @Before
    public void initTest() {
    	TestConfig.setAuthorization();
    }
    @Test
    public void createGetReplaceDeleteDevice() throws ApiException {
        Integer accountId = 1315091;
        CreateMenuParams data = new CreateMenuParams();
        data.setAllowExtensionDial(true);
        data.setName("Test Menu");
        data.setKeypressWaitTime(2);
        data.setMainMessage("testMess");
        data.setInvalidKeypressMessage("testMess");
        data.setTimeoutHandler("testASD");
        
         MenuFull response = api.createAccountMenu(accountId, data);
         assertNotNull(response.getId());
         assertNotNull(response.getAllowExtensionDial());
         assertNotNull(response.getGreeting());
         assertNotNull(response.getKeypressError());
         assertNotNull(response.getKeypressWaitTime());
         assertNotNull(response.getName());
         Integer menuID = response.getId();
         
         ReplaceMenuParams dataReplace = new ReplaceMenuParams();
         dataReplace.setAllowExtensionDial(false);
        
         MenuFull responseReplace = api.replaceAccountMenu(accountId, menuID, dataReplace);
         assertEquals(false, responseReplace.getAllowExtensionDial());
         
         DeleteMenu responseDelete = api.deleteAccountMenu(accountId, menuID);
         assertTrue(responseDelete.getSuccess());
    }
    /**
     * Create an individual menu
     *
     * This service creates an individual menu. See Account Menus for more info on the properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in previous test")
    public void createAccountMenuTest() throws ApiException {
        Integer accountId = 1315091;
        CreateMenuParams data = new CreateMenuParams();
        data.setAllowExtensionDial(true);
        data.setName("Test Menu");
        data.setKeypressWaitTime(2);
        data.setMainMessage("testMess");
        data.setInvalidKeypressMessage("testMess");
        data.setTimeoutHandler("testASD");
        
         MenuFull response = api.createAccountMenu(accountId, data);
         assertNotNull(response.getId());
    
       
    }
    
    /**
     * Delete an individual menu
     *
     * This service shows the details of an individual menu.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in previous test")
    public void deleteAccountMenuTest() throws ApiException {
        Integer accountId = null;
        Integer menuId = null;
        // DeleteMenu response = api.deleteAccountMenu(accountId, menuId);

        // TODO: test validations
    }
    
    /**
     * Show details of an individual menu
     *
     * This service shows the details of an individual Menu.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in previous test")
    public void getAccountMenuTest() throws ApiException {
        Integer accountId = 1315091;
        Integer menuId = 87926;
         MenuFull response = api.getAccountMenu(accountId, menuId);
         assertNotNull(response.getAllowExtensionDial());
         assertNotNull(response.getId());
         assertNotNull(response.getKeypressWaitTime());
         assertNotNull(response.getName());
         assertNotNull(response.getOptions());
         
        // TODO: test validations
    }
    
    /**
     * Get a list of menus for an account
     *
     * See Account Menus for more info on the properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAccountMenusTest() throws ApiException {
        Integer accountId = 1315091;
        List<String> filtersId = null;
        List<String> filtersName = null;
        String sortId = null;
        String sortName = null;
        Integer limit = null;
        Integer offset = null;
        String fields = null;
        ListMenusFull response = api.listAccountMenus(accountId, filtersId, filtersName, sortId, sortName, limit, offset, fields);
        assertNotNull(response.getFilters());
        assertNotNull(response.getItems());
        assertNotNull(response.getLimit());
        assertNotNull(response.getOffset());
        assertNotNull(response.getSort());
        assertNotNull(response.getTotal());
        
        // TODO: test validations
    }
    
    /**
     * Replace an individual menu
     *
     * This service replaces the details of an individual Menu.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in previous test")
    public void replaceAccountMenuTest() throws ApiException {
        Integer accountId = null;
        Integer menuId = null;
        ReplaceMenuParams data = null;
        // MenuFull response = api.replaceAccountMenu(accountId, menuId, data);

        // TODO: test validations
    }
    
}
