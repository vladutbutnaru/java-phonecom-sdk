/**
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import static io.swagger.client.helper.TestConfig.GREATER_THAN_FILTER;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.List;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import io.swagger.client.ApiException;
import io.swagger.client.helper.TestConfig;
import io.swagger.client.model.CreateExtensionParams;
import io.swagger.client.model.ExtensionFull;
import io.swagger.client.model.FilterIdExtensionNameArray;
import io.swagger.client.model.ListExtensions;
import io.swagger.client.model.ReplaceExtensionParams;
import io.swagger.client.model.SortIdExtensionName;
import io.swagger.client.model.Voicemail;
/**
 * API tests for ExtensionsApi
 */
public class ExtensionsApiTest {

    private final ExtensionsApi api = new ExtensionsApi();

    @Before
    public void initTest() {
    	TestConfig.setAuthorization();
    }
    
    @Test
    public void createGetReplaceExtension() throws ApiException {

    	// Create
    	Integer accountId = 1315091;

        CreateExtensionParams data = new CreateExtensionParams();
        Boolean allowsCallWaiting = true;
		data.setAllowsCallWaiting(allowsCallWaiting);
        String callerId = "+12019570328";
		data.setCallerId(callerId);
        String callNotificationsSms = "+18587748888";
		data.setCallNotificationsSms(callNotificationsSms);
        Boolean enableCallWaiting = true;
		data.setEnableCallWaiting(enableCallWaiting);
        Boolean enableOutboundCalls = false;
		data.setEnableOutboundCalls(enableOutboundCalls);
        Integer extension = TestConfig.randomNumber(100, 999999);
		data.setExtension(extension);
        String fullName = "Full Name";
		data.setFullName(fullName);
        Boolean includeInDirectory = true;
		data.setIncludeInDirectory(includeInDirectory);
        int localAreaCode = 619;
		data.setLocalAreaCode(localAreaCode);
        String name = "Name";
		data.setName(name);
        String timezone = "America/Los_Angeles";
		data.setTimezone(timezone);
        String usageType = "unlimited";
		data.setUsageType(usageType);
        Boolean voicemailEnabled = false;
		data.setVoicemailEnabled(voicemailEnabled);
        Boolean voicemailGreetingEnableLeaveMessagePrompt = true;
		data.setVoicemailGreetingEnableLeaveMessagePrompt(voicemailGreetingEnableLeaveMessagePrompt);
        String voicemailGreetingType = "standard";
		data.setVoicemailGreetingType(voicemailGreetingType);
        String voicemailNotificationsSms = "+18587741111";
		data.setVoicemailNotificationsSms(voicemailNotificationsSms);
        Integer voicemailPassword = 12345;
		data.setVoicemailPassword(voicemailPassword);
        String voicemailTranscription = "automated";
		data.setVoicemailTranscription(voicemailTranscription);

        ExtensionFull responseCreate = api.createAccountExtension(accountId, data);
        assertNotNull(responseCreate);
//        assertEquals(allowsCallWaiting, responseCreate.getAllowsCallWaiting());
        assertEquals(callerId, responseCreate.getCallerId());
//        assertEquals(callNotificationsSms, responseCreate.getCallNotifications().getSms());
        assertEquals(enableCallWaiting, responseCreate.getEnableCallWaiting());
        assertEquals(enableOutboundCalls, responseCreate.getEnableOutboundCalls());
        assertEquals(extension, responseCreate.getExtension());
        assertEquals(fullName, responseCreate.getFullName());
        assertEquals(includeInDirectory, responseCreate.getIncludeInDirectory());
        assertEquals("" + localAreaCode, responseCreate.getLocalAreaCode());
        assertEquals(name, responseCreate.getName());
        assertEquals(timezone, responseCreate.getTimezone());
        assertEquals(usageType, responseCreate.getUsageType());
//        assertEquals(voicemailEnabled, responseCreate.getVoicemail().getEnabled());
        assertEquals(voicemailGreetingEnableLeaveMessagePrompt, responseCreate.getVoicemail().getGreeting().getEnableLeaveMessagePrompt());
        assertEquals(voicemailGreetingType, responseCreate.getVoicemail().getGreeting().getType());
//        assertEquals(voicemailNotificationsSms, responseCreate.getVoicemail().getNotifications().getSms());
        assertEquals("000000", responseCreate.getVoicemail().getPassword());
//        assertEquals(voicemailTranscription, responseCreate.getVoicemail().getTranscription());
        

        // Get After Create
        ExtensionFull responseGetAfterCreate = api.getAccountExtension(accountId, responseCreate.getId());
        assertNotNull(responseGetAfterCreate);
//      assertEquals(allowsCallWaiting, responseCreate.getAllowsCallWaiting());
//        assertEquals(callerId, responseCreate.getCallerId());
//        assertEquals(callNotificationsSms, responseCreate.getCallNotifications().getSms());
        assertEquals(enableCallWaiting, responseCreate.getEnableCallWaiting());
        assertEquals(enableOutboundCalls, responseCreate.getEnableOutboundCalls());
//        assertEquals(extension, responseCreate.getExtension());
        assertEquals(fullName, responseCreate.getFullName());
        assertEquals(includeInDirectory, responseCreate.getIncludeInDirectory());
//        assertEquals(localAreaCode, responseCreate.getLocalAreaCode());
        assertEquals(name, responseCreate.getName());
//        assertEquals(timezone, responseCreate.getTimezone());
//        assertEquals(usageType, responseCreate.getUsageType());
//        assertEquals(voicemailEnabled, responseCreate.getVoicemail().getEnabled());
        assertEquals(voicemailGreetingEnableLeaveMessagePrompt, responseCreate.getVoicemail().getGreeting().getEnableLeaveMessagePrompt());
        assertEquals(voicemailGreetingType, responseCreate.getVoicemail().getGreeting().getType());
//        assertEquals(voicemailNotificationsSms, responseCreate.getVoicemail().getNotifications().getSms());
        assertEquals("000000", responseCreate.getVoicemail().getPassword());
//        assertEquals(voicemailTranscription, responseCreate.getVoicemail().getTranscription());

        // Replace
        ReplaceExtensionParams data2 = new ReplaceExtensionParams();
        String fullName2 = "bobby McFerrin";
		data2.setFullName(fullName2);
        String callerId2 = "private";
		data2.setCallerId(callerId2);
        String callNotificationsSms2 = "+18587748888";
		data2.setCallNotificationsSms(callNotificationsSms2);
        Boolean enableCallWaiting2 = true;
		data2.setEnableCallWaiting(enableCallWaiting2);
        Boolean enableOutboundCalls2 = true;
		data2.setEnableOutboundCalls(enableOutboundCalls2);
        Integer extension2 = responseCreate.getExtension();
		data2.setExtension(extension2);
        Boolean includeInDirectory2 = true;
		data2.setIncludeInDirectory(includeInDirectory2);
        int localAreaCode2 = 619;
		data2.setLocalAreaCode(localAreaCode2);
        String name2 = "03l89s73fb7l";
		data2.setName(name2);
        String timezone2 = "America/Los_Angeles";
		data2.setTimezone(timezone2);
        String usageType2 = "unlimited";
		data2.setUsageType(usageType2);
        Boolean voicemailEnabled2 = true;
		data2.setVoicemailEnabled(voicemailEnabled2);
        Boolean voicemailGreetingEnableLeaveMessagePrompt2 = true;
		data2.setVoicemailGreetingEnableLeaveMessagePrompt(voicemailGreetingEnableLeaveMessagePrompt2);
        String voicemailGreetingType2 = "standard";
		data2.setVoicemailGreetingType(voicemailGreetingType2);
        String voicemailNotificationsSms2 = "+18587741111";
		data2.setVoicemailNotificationsSms(voicemailNotificationsSms2);
        Integer voicemailPassword2 = 12344;
		data2.setVoicemailPassword(voicemailPassword2);
        String voicemailTranscription2 = "automated";
		data2.setVoicemailTranscription(voicemailTranscription2);

        ExtensionFull responseReplace = api.replaceAccountExtension(accountId, responseCreate.getId(), data2);
    	assertNotNull(responseReplace);
    	
//      assertEquals(allowsCallWaiting, responseCreate.getAllowsCallWaiting());
    	assertEquals(callerId2, responseReplace.getCallerId());
//    	assertEquals(callNotificationsSms2, responseReplace.getCallNotifications().getSms());
    	assertEquals(enableCallWaiting2, responseReplace.getEnableCallWaiting());
    	assertEquals(enableOutboundCalls2, responseReplace.getEnableOutboundCalls());
    	assertEquals(extension2, responseReplace.getExtension());
    	assertEquals(fullName2, responseReplace.getFullName());
    	assertEquals(includeInDirectory2, responseReplace.getIncludeInDirectory());
    	assertEquals("" + localAreaCode2, responseReplace.getLocalAreaCode());
    	assertEquals(name2, responseReplace.getName());
    	assertEquals(timezone2, responseReplace.getTimezone());
    	assertEquals(usageType2, responseReplace.getUsageType());
    	assertEquals(voicemailEnabled2, responseReplace.getVoicemail().getEnabled());
    	assertEquals(voicemailGreetingEnableLeaveMessagePrompt2, responseReplace.getVoicemail().getGreeting().getEnableLeaveMessagePrompt());
    	assertEquals(voicemailGreetingType2, responseReplace.getVoicemail().getGreeting().getType());
//    	assertEquals(voicemailNotificationsSms2, responseReplace.getVoicemail().getNotifications().getSms());
//    	assertEquals(voicemailPassword2, responseReplace.getVoicemail().getPassword());
//    	assertEquals(voicemailTranscription2, responseReplace.getVoicemail().getTranscription());

        // Get After Replace
        ExtensionFull responseGetAfterReplace = api.getAccountExtension(accountId, responseReplace.getId());
        assertNotNull(responseGetAfterReplace);
//      assertEquals(allowsCallWaiting2, responseReplace.getAllowsCallWaiting());
        assertEquals(callerId2, responseReplace.getCallerId());
//        assertEquals(callNotificationsSms2, responseReplace.getCallNotifications().getSms());
        assertEquals(enableCallWaiting2, responseReplace.getEnableCallWaiting());
        assertEquals(enableOutboundCalls2, responseReplace.getEnableOutboundCalls());
        assertEquals(extension2, responseReplace.getExtension());
        assertEquals(fullName2, responseReplace.getFullName());
        assertEquals(includeInDirectory2, responseReplace.getIncludeInDirectory());
        assertEquals("" + localAreaCode2, responseReplace.getLocalAreaCode());
        assertEquals(name2, responseReplace.getName());
        assertEquals(timezone2, responseReplace.getTimezone());
        assertEquals(usageType2, responseReplace.getUsageType());
        assertEquals(voicemailEnabled2, responseReplace.getVoicemail().getEnabled());
        assertEquals(voicemailGreetingEnableLeaveMessagePrompt2, responseReplace.getVoicemail().getGreeting().getEnableLeaveMessagePrompt());
        assertEquals(voicemailGreetingType2, responseReplace.getVoicemail().getGreeting().getType());
//        assertEquals(voicemailNotificationsSms2, responseReplace.getVoicemail().getNotifications().getSms());
//        assertEquals(voicemailPassword2, responseReplace.getVoicemail().getPassword());
//        assertEquals(voicemailTranscription2, responseReplace.getVoicemail().getTranscription());
    }
    
    /**
     * Create an individual extension
     *
     * This service shows how to create a virtual extension.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in previous test")
    public void createAccountExtensionTest() throws ApiException {
        Integer accountId = null;
        CreateExtensionParams data = null;
        ExtensionFull response = api.createAccountExtension(accountId, data);

        assertNotNull(response);
    }
    
    /**
     * Show details of an individual extension
     *
     * This service shows the details of an individual Extension.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountExtensionTest() throws ApiException {

        Integer accountId = 1315091;
        Integer extensionId = 1764590;
        ExtensionFull response = api.getAccountExtension(accountId, extensionId);
        
        assertNotNull(response);
        
        String callerId = response.getCallerId();
        assertNotNull(callerId);
//        Notification callNotifications = response.getCallNotifications();
//        assertNotNull(callNotifications);
//        DeviceMembership deviceMembership = response.getDeviceMembership();
//        assertNotNull(deviceMembership);
        Boolean enableCallWaiting = response.getEnableCallWaiting();
        assertNotNull(enableCallWaiting);
        Boolean enableOutboundCalls = response.getEnableOutboundCalls();
        assertNotNull(enableOutboundCalls);
        Integer extension = response.getExtension();
        assertNotNull(extension);
//        String fullName = response.getFullName();
//        assertNotNull(fullName);
        Integer id = response.getId();
        assertNotNull(id);
        Boolean includeInDirectory = response.getIncludeInDirectory();
        assertNotNull(includeInDirectory);
//        String localAreaCode = response.getLocalAreaCode();
//        assertNotNull(localAreaCode);
        String name = response.getName();
        assertNotNull(name);
//        MediaSummary nameGreeting = response.getNameGreeting();
//        assertNotNull(nameGreeting);
//        RouteSummary route = response.getRoute();
//        assertNotNull(route);
        String timezone = response.getTimezone();
        assertNotNull(timezone);
        String usageType = response.getUsageType();
        assertNotNull(usageType);
        Voicemail voicemail = response.getVoicemail();
        assertNotNull(voicemail);
        
    }
    
    /**
     * Get a list of extensions visible to the authenticated user or client
     *
     * This service lists the visible extensions on a given account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAccountExtensionsTest() throws ApiException {

        Integer accountId = 1315091;
        List<String> filtersId = TestConfig.createDefaultFilter();
        List<String> filtersExtension = TestConfig.createDefaultFilter();
        List<String> filtersName = TestConfig.createDefaultFilter();
        String sortId = "desc";
        String sortExtension = "desc";
        String sortName = "desc";
        Integer limit = 4;
        Integer offset = 1;
        String fields = null;
        ListExtensions response = api.listAccountExtensions(accountId, filtersId, filtersExtension, filtersName, sortId, sortExtension, sortName, limit, offset, fields);

        assertNotNull(response);
        List<ExtensionFull> items = response.getItems();
        assertNotNull(items);
        
        FilterIdExtensionNameArray filters = response.getFilters();
        assertNotNull(filters);
        assertEquals(GREATER_THAN_FILTER, filters.getId());
        
        assertEquals(GREATER_THAN_FILTER, filters.getExtension());
        
        assertEquals(GREATER_THAN_FILTER, filters.getName());
        
        Integer limitActual = response.getLimit();
        assertNotNull(limitActual);
        assertEquals(limit, limitActual);
        
        Integer offsetActual = response.getOffset();
        assertNotNull(offsetActual);
        assertEquals(offset, offsetActual);

        SortIdExtensionName sort = response.getSort();
        assertNotNull(sort);
        assertEquals(sortId, sort.getId());

        assertEquals(sortExtension, sort.getId());

        assertEquals(sortName, sort.getId());
    }
    
    /**
     * Replace an individual extension
     *
     * This service shows how to update an individual extension.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("Tested in previous test")
    public void replaceAccountExtensionTest() throws ApiException {

        Integer accountId = null;
        Integer extensionId = null;
        ReplaceExtensionParams data = null;
        ExtensionFull response = api.replaceAccountExtension(accountId, extensionId, data);

        assertNotNull(response);
    }
    
}
