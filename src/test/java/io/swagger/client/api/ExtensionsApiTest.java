/**
 * Phone.com API
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import static io.swagger.client.helper.TestConfig.GREATER_THAN_FILTER;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.List;

import org.junit.Before;
import org.junit.Test;

import io.swagger.client.ApiException;
import io.swagger.client.helper.TestConfig;
import io.swagger.client.model.CreateExtensionParams;
import io.swagger.client.model.DeviceMembership;
import io.swagger.client.model.ExtensionFull;
import io.swagger.client.model.FilterIdExtensionNameArray;
import io.swagger.client.model.ListExtensionsFull;
import io.swagger.client.model.MediaSummary;
import io.swagger.client.model.Notification;
import io.swagger.client.model.ReplaceExtensionParams;
import io.swagger.client.model.RouteSummary;
import io.swagger.client.model.SortIdExtensionName;
import io.swagger.client.model.Voicemail;
/**
 * API tests for ExtensionsApi
 */
public class ExtensionsApiTest {

    private final ExtensionsApi api = new ExtensionsApi();

    @Before
    public void initTest() {
    	TestConfig.setAuthorization();
    }
    
    /**
     * Create an individual extension
     *
     * This service shows how to create a virtual extension.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAccountExtensionTest() throws ApiException {
        Integer accountId = null;
        CreateExtensionParams data = null;
        // ExtensionFull response = api.createAccountExtension(accountId, data);

        // TODO: test validations
    }
    
    /**
     * Show details of an individual extension
     *
     * This service shows the details of an individual Extension.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountExtensionTest() throws ApiException {
        Integer accountId = 1315091;
        Integer extensionId = 1764590;
        ExtensionFull response = api.getAccountExtension(accountId, extensionId);
        
        assertNotNull(response);
        
        String callerId = response.getCallerId();
        assertNotNull(callerId);
//        Notification callNotifications = response.getCallNotifications();
//        assertNotNull(callNotifications);
//        DeviceMembership deviceMembership = response.getDeviceMembership();
//        assertNotNull(deviceMembership);
        Boolean enableCallWaiting = response.getEnableCallWaiting();
        assertNotNull(enableCallWaiting);
        Boolean enableOutboundCalls = response.getEnableOutboundCalls();
        assertNotNull(enableOutboundCalls);
        Integer extension = response.getExtension();
        assertNotNull(extension);
//        String fullName = response.getFullName();
//        assertNotNull(fullName);
        Integer id = response.getId();
        assertNotNull(id);
        Boolean includeInDirectory = response.getIncludeInDirectory();
        assertNotNull(includeInDirectory);
//        String localAreaCode = response.getLocalAreaCode();
//        assertNotNull(localAreaCode);
        String name = response.getName();
        assertNotNull(name);
//        MediaSummary nameGreeting = response.getNameGreeting();
//        assertNotNull(nameGreeting);
//        RouteSummary route = response.getRoute();
//        assertNotNull(route);
        String timezone = response.getTimezone();
        assertNotNull(timezone);
        String usageType = response.getUsageType();
        assertNotNull(usageType);
        Voicemail voicemail = response.getVoicemail();
        assertNotNull(voicemail);
        
    }
    
    /**
     * Get a list of extensions visible to the authenticated user or client
     *
     * This service lists the visible extensions on a given account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAccountExtensionsTest() throws ApiException {
        Integer accountId = 1315091;
        List<String> filtersId = TestConfig.createDefaultFilter();
        List<String> filtersExtension = TestConfig.createDefaultFilter();
        List<String> filtersName = TestConfig.createDefaultFilter();
        String sortId = "desc";
        String sortExtension = "desc";
        String sortName = "desc";
        Integer limit = 4;
        Integer offset = 1;
        String fields = null;
        ListExtensionsFull response = api.listAccountExtensions(accountId, filtersId, filtersExtension, filtersName, sortId, sortExtension, sortName, limit, offset, fields);

        assertNotNull(response);
        List<ExtensionFull> items = response.getItems();
        assertNotNull(items);
        
        FilterIdExtensionNameArray filters = response.getFilters();
        assertNotNull(filters);
        assertEquals(GREATER_THAN_FILTER, filters.getId());
        
        assertEquals(GREATER_THAN_FILTER, filters.getExtension());
        
        assertEquals(GREATER_THAN_FILTER, filters.getName());
        
        Integer limitActual = response.getLimit();
        assertNotNull(limitActual);
        assertEquals(limit, limitActual);
        
        Integer offsetActual = response.getOffset();
        assertNotNull(offsetActual);
        assertEquals(offset, offsetActual);

        SortIdExtensionName sort = response.getSort();
        assertNotNull(sort);
        assertEquals(sortId, sort.getId());

        assertEquals(sortExtension, sort.getId());

        assertEquals(sortName, sort.getId());
    }
    
    /**
     * Replace an individual extension
     *
     * This service shows how to update an individual extension.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAccountExtensionTest() throws ApiException {
        Integer accountId = null;
        Integer extensionId = null;
        ReplaceExtensionParams data = null;
        // ExtensionFull response = api.replaceAccountExtension(accountId, extensionId, data);

        // TODO: test validations
    }
    
}
